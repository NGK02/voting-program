/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VOTING_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CAST_VOTE_DISCRIMINATOR = new Uint8Array([
  20, 212, 15, 189, 69, 180, 69, 151,
]);

export function getCastVoteDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CAST_VOTE_DISCRIMINATOR);
}

export type CastVoteInstruction<
  TProgram extends string = typeof VOTING_PROGRAM_PROGRAM_ADDRESS,
  TAccountVoter extends string | AccountMeta<string> = string,
  TAccountVote extends string | AccountMeta<string> = string,
  TAccountProposal extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountVoter extends string
        ? WritableSignerAccount<TAccountVoter> &
            AccountSignerMeta<TAccountVoter>
        : TAccountVoter,
      TAccountVote extends string
        ? WritableAccount<TAccountVote>
        : TAccountVote,
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CastVoteInstructionData = {
  discriminator: ReadonlyUint8Array;
  candidateIds: Array<string>;
};

export type CastVoteInstructionDataArgs = { candidateIds: Array<string> };

export function getCastVoteInstructionDataEncoder(): Encoder<CastVoteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'candidateIds',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({ ...value, discriminator: CAST_VOTE_DISCRIMINATOR })
  );
}

export function getCastVoteInstructionDataDecoder(): Decoder<CastVoteInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'candidateIds',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getCastVoteInstructionDataCodec(): Codec<
  CastVoteInstructionDataArgs,
  CastVoteInstructionData
> {
  return combineCodec(
    getCastVoteInstructionDataEncoder(),
    getCastVoteInstructionDataDecoder()
  );
}

export type CastVoteAsyncInput<
  TAccountVoter extends string = string,
  TAccountVote extends string = string,
  TAccountProposal extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  voter: TransactionSigner<TAccountVoter>;
  vote?: Address<TAccountVote>;
  proposal: Address<TAccountProposal>;
  systemProgram?: Address<TAccountSystemProgram>;
  candidateIds: CastVoteInstructionDataArgs['candidateIds'];
};

export async function getCastVoteInstructionAsync<
  TAccountVoter extends string,
  TAccountVote extends string,
  TAccountProposal extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VOTING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: CastVoteAsyncInput<
    TAccountVoter,
    TAccountVote,
    TAccountProposal,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CastVoteInstruction<
    TProgramAddress,
    TAccountVoter,
    TAccountVote,
    TAccountProposal,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VOTING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    voter: { value: input.voter ?? null, isWritable: true },
    vote: { value: input.vote ?? null, isWritable: true },
    proposal: { value: input.proposal ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.vote.value) {
    accounts.vote.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([86, 79, 84, 69, 95, 83, 69, 69, 68])
        ),
        getAddressEncoder().encode(expectAddress(accounts.voter.value)),
        getAddressEncoder().encode(expectAddress(accounts.proposal.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.voter),
      getAccountMeta(accounts.vote),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCastVoteInstructionDataEncoder().encode(
      args as CastVoteInstructionDataArgs
    ),
  } as CastVoteInstruction<
    TProgramAddress,
    TAccountVoter,
    TAccountVote,
    TAccountProposal,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CastVoteInput<
  TAccountVoter extends string = string,
  TAccountVote extends string = string,
  TAccountProposal extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  voter: TransactionSigner<TAccountVoter>;
  vote: Address<TAccountVote>;
  proposal: Address<TAccountProposal>;
  systemProgram?: Address<TAccountSystemProgram>;
  candidateIds: CastVoteInstructionDataArgs['candidateIds'];
};

export function getCastVoteInstruction<
  TAccountVoter extends string,
  TAccountVote extends string,
  TAccountProposal extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VOTING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: CastVoteInput<
    TAccountVoter,
    TAccountVote,
    TAccountProposal,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CastVoteInstruction<
  TProgramAddress,
  TAccountVoter,
  TAccountVote,
  TAccountProposal,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VOTING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    voter: { value: input.voter ?? null, isWritable: true },
    vote: { value: input.vote ?? null, isWritable: true },
    proposal: { value: input.proposal ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.voter),
      getAccountMeta(accounts.vote),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCastVoteInstructionDataEncoder().encode(
      args as CastVoteInstructionDataArgs
    ),
  } as CastVoteInstruction<
    TProgramAddress,
    TAccountVoter,
    TAccountVote,
    TAccountProposal,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCastVoteInstruction<
  TProgram extends string = typeof VOTING_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    voter: TAccountMetas[0];
    vote: TAccountMetas[1];
    proposal: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: CastVoteInstructionData;
};

export function parseCastVoteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCastVoteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      voter: getNextAccount(),
      vote: getNextAccount(),
      proposal: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCastVoteInstructionDataDecoder().decode(instruction.data),
  };
}
