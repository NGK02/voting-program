/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getCandidateDecoder,
  getCandidateEncoder,
  type Candidate,
  type CandidateArgs,
} from '../types';

export const PROPOSAL_DISCRIMINATOR = new Uint8Array([
  26, 94, 189, 187, 116, 136, 53, 33,
]);

export function getProposalDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PROPOSAL_DISCRIMINATOR);
}

export type Proposal = {
  discriminator: ReadonlyUint8Array;
  title: string;
  description: string;
  candidates: Array<Candidate>;
  proposalFinishedFrom: bigint;
  proposer: Address;
  bump: number;
};

export type ProposalArgs = {
  title: string;
  description: string;
  candidates: Array<CandidateArgs>;
  proposalFinishedFrom: number | bigint;
  proposer: Address;
  bump: number;
};

export function getProposalEncoder(): Encoder<ProposalArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['candidates', getArrayEncoder(getCandidateEncoder())],
      ['proposalFinishedFrom', getI64Encoder()],
      ['proposer', getAddressEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PROPOSAL_DISCRIMINATOR })
  );
}

export function getProposalDecoder(): Decoder<Proposal> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['candidates', getArrayDecoder(getCandidateDecoder())],
    ['proposalFinishedFrom', getI64Decoder()],
    ['proposer', getAddressDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getProposalCodec(): Codec<ProposalArgs, Proposal> {
  return combineCodec(getProposalEncoder(), getProposalDecoder());
}

export function decodeProposal<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Proposal, TAddress>;
export function decodeProposal<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Proposal, TAddress>;
export function decodeProposal<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Proposal, TAddress> | MaybeAccount<Proposal, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProposalDecoder()
  );
}

export async function fetchProposal<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Proposal, TAddress>> {
  const maybeAccount = await fetchMaybeProposal(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProposal<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Proposal, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProposal(maybeAccount);
}

export async function fetchAllProposal(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Proposal>[]> {
  const maybeAccounts = await fetchAllMaybeProposal(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProposal(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Proposal>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeProposal(maybeAccount));
}
