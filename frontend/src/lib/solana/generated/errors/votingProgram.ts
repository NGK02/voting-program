/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { VOTING_PROGRAM_PROGRAM_ADDRESS } from '../programs';

/** TitleTooLong: Cannot create proposal, title too long */
export const VOTING_PROGRAM_ERROR__TITLE_TOO_LONG = 0x1770; // 6000
/** DescriptionTooLong: Cannot create proposal, description too long */
export const VOTING_PROGRAM_ERROR__DESCRIPTION_TOO_LONG = 0x1771; // 6001
/** TooManyCandidates: Cannot create proposal, too many candidates specified */
export const VOTING_PROGRAM_ERROR__TOO_MANY_CANDIDATES = 0x1772; // 6002
/** NotEnoughCandidates: Cannot create proposal, not enough candidates specified */
export const VOTING_PROGRAM_ERROR__NOT_ENOUGH_CANDIDATES = 0x1773; // 6003
/** CandidateIdTooLong: Cannot create proposal, candidate ID too long */
export const VOTING_PROGRAM_ERROR__CANDIDATE_ID_TOO_LONG = 0x1774; // 6004
/** InvalidProposalTime: Cannot create proposal, invalid proposal time */
export const VOTING_PROGRAM_ERROR__INVALID_PROPOSAL_TIME = 0x1775; // 6005
/** NotEnoughCandidateVotes: Cannot cast vote, no candidate votes specified */
export const VOTING_PROGRAM_ERROR__NOT_ENOUGH_CANDIDATE_VOTES = 0x1776; // 6006
/** TooManyCandidateVotes: Cannot cast vote, too many candidate votes specified */
export const VOTING_PROGRAM_ERROR__TOO_MANY_CANDIDATE_VOTES = 0x1777; // 6007
/** DuplicateCandidates: Cannot create proposal, duplicate candidates specified */
export const VOTING_PROGRAM_ERROR__DUPLICATE_CANDIDATES = 0x1778; // 6008
/** InvalidCandidateId: Cannot cast vote, invalid candidate ID specified */
export const VOTING_PROGRAM_ERROR__INVALID_CANDIDATE_ID = 0x1779; // 6009
/** ProposalClosed: Cannot cast vote, proposal already closed */
export const VOTING_PROGRAM_ERROR__PROPOSAL_CLOSED = 0x177a; // 6010

export type VotingProgramError =
  | typeof VOTING_PROGRAM_ERROR__CANDIDATE_ID_TOO_LONG
  | typeof VOTING_PROGRAM_ERROR__DESCRIPTION_TOO_LONG
  | typeof VOTING_PROGRAM_ERROR__DUPLICATE_CANDIDATES
  | typeof VOTING_PROGRAM_ERROR__INVALID_CANDIDATE_ID
  | typeof VOTING_PROGRAM_ERROR__INVALID_PROPOSAL_TIME
  | typeof VOTING_PROGRAM_ERROR__NOT_ENOUGH_CANDIDATES
  | typeof VOTING_PROGRAM_ERROR__NOT_ENOUGH_CANDIDATE_VOTES
  | typeof VOTING_PROGRAM_ERROR__PROPOSAL_CLOSED
  | typeof VOTING_PROGRAM_ERROR__TITLE_TOO_LONG
  | typeof VOTING_PROGRAM_ERROR__TOO_MANY_CANDIDATES
  | typeof VOTING_PROGRAM_ERROR__TOO_MANY_CANDIDATE_VOTES;

let votingProgramErrorMessages: Record<VotingProgramError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  votingProgramErrorMessages = {
    [VOTING_PROGRAM_ERROR__CANDIDATE_ID_TOO_LONG]: `Cannot create proposal, candidate ID too long`,
    [VOTING_PROGRAM_ERROR__DESCRIPTION_TOO_LONG]: `Cannot create proposal, description too long`,
    [VOTING_PROGRAM_ERROR__DUPLICATE_CANDIDATES]: `Cannot create proposal, duplicate candidates specified`,
    [VOTING_PROGRAM_ERROR__INVALID_CANDIDATE_ID]: `Cannot cast vote, invalid candidate ID specified`,
    [VOTING_PROGRAM_ERROR__INVALID_PROPOSAL_TIME]: `Cannot create proposal, invalid proposal time`,
    [VOTING_PROGRAM_ERROR__NOT_ENOUGH_CANDIDATES]: `Cannot create proposal, not enough candidates specified`,
    [VOTING_PROGRAM_ERROR__NOT_ENOUGH_CANDIDATE_VOTES]: `Cannot cast vote, no candidate votes specified`,
    [VOTING_PROGRAM_ERROR__PROPOSAL_CLOSED]: `Cannot cast vote, proposal already closed`,
    [VOTING_PROGRAM_ERROR__TITLE_TOO_LONG]: `Cannot create proposal, title too long`,
    [VOTING_PROGRAM_ERROR__TOO_MANY_CANDIDATES]: `Cannot create proposal, too many candidates specified`,
    [VOTING_PROGRAM_ERROR__TOO_MANY_CANDIDATE_VOTES]: `Cannot cast vote, too many candidate votes specified`,
  };
}

export function getVotingProgramErrorMessage(code: VotingProgramError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (votingProgramErrorMessages as Record<VotingProgramError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isVotingProgramError<
  TProgramErrorCode extends VotingProgramError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    VOTING_PROGRAM_PROGRAM_ADDRESS,
    code
  );
}
