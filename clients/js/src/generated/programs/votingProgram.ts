/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCastVoteInstruction,
  type ParsedCreateProposalInstruction,
} from '../instructions';

export const VOTING_PROGRAM_PROGRAM_ADDRESS =
  '51kgRBSnzQVTbK6jdgWj6NaXQ3gcyripUSW4kvAha3kd' as Address<'51kgRBSnzQVTbK6jdgWj6NaXQ3gcyripUSW4kvAha3kd'>;

export enum VotingProgramAccount {
  Proposal,
  Vote,
}

export function identifyVotingProgramAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VotingProgramAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([26, 94, 189, 187, 116, 136, 53, 33])
      ),
      0
    )
  ) {
    return VotingProgramAccount.Proposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([96, 91, 104, 57, 145, 35, 172, 155])
      ),
      0
    )
  ) {
    return VotingProgramAccount.Vote;
  }
  throw new Error(
    'The provided account could not be identified as a votingProgram account.'
  );
}

export enum VotingProgramInstruction {
  CastVote,
  CreateProposal,
}

export function identifyVotingProgramInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VotingProgramInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([20, 212, 15, 189, 69, 180, 69, 151])
      ),
      0
    )
  ) {
    return VotingProgramInstruction.CastVote;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([132, 116, 68, 174, 216, 160, 198, 22])
      ),
      0
    )
  ) {
    return VotingProgramInstruction.CreateProposal;
  }
  throw new Error(
    'The provided instruction could not be identified as a votingProgram instruction.'
  );
}

export type ParsedVotingProgramInstruction<
  TProgram extends string = '51kgRBSnzQVTbK6jdgWj6NaXQ3gcyripUSW4kvAha3kd',
> =
  | ({
      instructionType: VotingProgramInstruction.CastVote;
    } & ParsedCastVoteInstruction<TProgram>)
  | ({
      instructionType: VotingProgramInstruction.CreateProposal;
    } & ParsedCreateProposalInstruction<TProgram>);
